name: 'Terragrunt Plan'
on:
  push:
    branches:
    - main
  pull_request:
jobs:
  Terragrunt:
    name: 'Terragrunt Plan'
    env:
      tf_working_dir: '.'
    runs-on: ubuntu-latest
    environment: prod
    defaults:
      run:
        shell: bash
    steps:
    # Login to Azure
    - name: 'Log into Azure using github secret AZURE_CREDENTIALS'
      uses: Azure/login@v1
      with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
         
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install the latest version of Terragrunt CLI and configure the Terragrunt CLI configuration file with a Terragrunt Cloud user API token
    - name: Setup Terraform 
      uses: hashicorp/setup-Terraform@v3
      with:
        terraform_version: 1.7.3
        terraform_wrapper: false
        
    - name: Setup Terraform version
      run: terraform --version
      
    - name: Setup Terraform wrapper path
      run: which terraform

    - name: Setup Terragrunt
      run: |
        sudo wget -q -O /bin/terragrunt "https://github.com/gruntwork-io/terragrunt/releases/download/v0.55.4/terragrunt_linux_amd64"
        sudo chmod +x /bin/terragrunt
        terragrunt -v
        
    # Initialize Terragrunt
    - name: Terragrunt Init
      run: terragrunt init --terragrunt-non-interactive
      
    # Generates an execution plan for Terragrunt
    - name: Terragrunt Plan
      run: terragrunt run-all plan --terragrunt-non-interactive

    - name: Add Plan Comment
      id: comment
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
      
          Show Plan
          
          \`\`\`${process.env.PLAN}\`\`\`
          
           *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;
            
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })
